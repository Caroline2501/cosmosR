viper_regulon <- df_to_viper_regulon(dorothea)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity[] <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
View(TF_activity)
mean(ttop_InfectedvsControl$t)
View(viper_regulon)
length(viper_regulon):1
viper_regulon <- viper_regulon[length(viper_regulon):1]
View(viper_regulon)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity[] <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
View(TF_activity)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
View(TF_activity)
order(abs(TF_activity$V1)
)
View(TF_activity)
#first we need to format the dorothea dataframe we prepared into a proper viper input
viper_regulon <- df_to_viper_regulon(dorothea)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
View(viper_regulon)
TF_activity <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity[] <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
View(TF_activity)
TF_activity <- TF_activity[order(abs(TF_activity$V1), decreasing = T),,drop = FALSE]
View(TF_activity)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity <- TF_activity[order(abs(TF_activity$V1), decreasing = T),,drop = FALSE]
to_bar <- TF_activity[order(abs(TF_activity$V1), decreasing = T),, drop = F]
to_bar <- to_bar[1:20,,drop = F]
to_bar$ID <- factor(row.names(to_bar), levels = row.names(to_bar))
ggplot(to_bar,aes(x = ID, y = V1)) + geom_bar(stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
volcano_nice(ttop_InfectedvsControl[ttop_InfectedvsControl$gene %in% names(viper_regulon$USF1$tfmode),], #example
FCIndex = 2, pValIndex = 5, IDIndex = 1,nlabels = 20, label = T)
##Import and generate a causal network from OMNIPATH
url <- paste0(
'http://omnipathdb.org/interactions?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath <- download_omnipath()
omnipath <- omnipath[omnipath$is_stimulation != 0 | omnipath$is_inhibition != 0,]
omnipath_sif <- omnipath[omnipath$is_stimulation ==1,c(3,6,4)] #First we get the activation
omnipath_sif_2 <- omnipath[omnipath$is_inhibition ==1,c(3,7,4)] #Then we get the inhibtion
names(omnipath_sif) <- c("source","sign","target")
names(omnipath_sif_2) <- c("source","sign","target")
#Then we bind together activations and inhibtion to get the complete network
omnipath_sif <- as.data.frame(rbind(omnipath_sif,omnipath_sif_2))
omnipath_sif$source <- gsub("-","_",omnipath_sif$source)
omnipath_sif$target <- gsub("-","_",omnipath_sif$target)
#Some additional interactions from pathwayExtra of omnipath
# 1              CDK1              ACE2           0              0             0
# 2               AGT              ACE2           0              0             0
# 3            ADAM17              ACE2           1              0             1
# 4              ACE2              CCL2           1              1             0
add_interactions <- as.data.frame(matrix(NA,2,3))
add_interactions[,1] <- c("ADAM17","ACE2")
add_interactions[,2] <- c(-1,1)
add_interactions[,3] <- c("ACE2","CCL2")
names(add_interactions) <- c("source","sign","target")
omnipath_sif <- as.data.frame(rbind(omnipath_sif,add_interactions))
write_tsv(omnipath_sif,"~/Dropbox/test/omni_sif.tsv")
#We define the end points that we are trying to reach in the network, from the initial perturbation
TF_carni_inputs <- as.data.frame(t(TF_activity[c(1:25),,drop = F]))
write_tsv(TF_carni_inputs,"~/Dropbox/test/TF_activities_carni.tsv")
View(TF_carni_inputs)
View(ttop_InfectedvsControl)
View(ttop_InfectedvsControl)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
meta_network_carnival_ready_exch_solved <- read_delim("Dropbox/COSMOS/support/meta_network_carnival_ready_exch_solved.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(meta_network_carnival_ready_exch_solved)
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("results/metabolomic/ttop_tumour_vs_healthy.csv"))
setwd("~/Dropbox/COSMOS/")
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("results/metabolomic/ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_delim("support/meta_network_carnival_ready_exch_solved.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
kegg_to_pubchem <- as.data.frame(
read_csv("support/kegg_to_pubchem.txt",
col_names = FALSE))
View(ttop_tumour_vs_healthy)
View(metab_to_kegg)
View(meta_network_with_X)
View(kegg_to_pubchem)
View(kegg_to_pubchem)
kegg_to_pubchem$X2 <- paste("XMetab__",kegg_to_pubchem$X2, sep = "")
compartment_codes <- unique(c(meta_network_with_X$source,meta_network_with_X$target))
compartment_codes <- compartment_codes[grepl("Metab",compartment_codes)]
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
library(readr)
library(stringr)
library('org.Hs.eg.db')
setwd("~/Dropbox/COSMOS/")
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
compartment_codes
library(readr)
library(stringr)
library('org.Hs.eg.db')
setwd("~/Dropbox/COSMOS/")
meta_network_carnival_ready_exch_solved <- read_delim("~/Dropbox/COSMOS/support/meta_network_carnival_ready_exch_solved.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("results/metabolomic/ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("support/metab_to_kegg.txt"))
kegg_to_pubchem <- as.data.frame(
read_csv("support/kegg_to_pubchem.txt",
col_names = FALSE))
meta_network_with_X <- as.data.frame(
read_delim("support/meta_network_carnival_ready_exch_solved.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
kegg_to_pubchem$X2 <- paste("XMetab__",kegg_to_pubchem$X2, sep = "")
compartment_codes <- unique(c(meta_network_with_X$source,meta_network_with_X$target))
compartment_codes <- compartment_codes[grepl("Metab",compartment_codes)]
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
compartment_mapping <- list()
for(i in 1:length(compartment_codes))
{
df <- kegg_to_pubchem
df$X2 <- paste(df$X2, compartment_codes[i], sep = "")
compartment_mapping[[i]] <- df
}
compartment_mapping <- as.data.frame(do.call(rbind, compartment_mapping))
compartment_mapping <- compartment_mapping[
compartment_mapping$X2 %in% meta_network_with_X$source |
compartment_mapping$X2 %in% meta_network_with_X$target,
]
kegg_to_pubchem_with_comp <- compartment_mapping
names(kegg_to_pubchem_with_comp) <- c("KEGG","pubchem")
full_mapping <- merge(metab_to_kegg, kegg_to_pubchem_with_comp, by = "KEGG")
names(ttop_tumour_vs_healthy)[1] <- "metab_name"
ttop_tumour_vs_healthy <- merge(ttop_tumour_vs_healthy, full_mapping, by = "metab_name")
ttop_tumour_vs_healthy <- ttop_tumour_vs_healthy[,c(9,2:7)]
##KINASE/PHOSPHATASES
kinase_activities <- as.data.frame(
read_csv("results/phospho/kinase_activities.csv"))
symbols <- kinase_activities$X1
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(kinase_activities[,1]))
{
kinase_activities[i,1] <- mapping_symbole_to_entrez[kinase_activities[i,1]]
}
kinase_activities <- kinase_activities[complete.cases(kinase_activities),]
kinase_activities$X1 <- paste("X", kinase_activities$X1, sep = "")
##TF
TF_scores <- as.data.frame(
read_csv("results/transcriptomic/TF_scores.csv"))
symbols <- TF_scores$ID
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(TF_scores[,1]))
{
TF_scores[i,1] <- mapping_symbole_to_entrez[TF_scores[i,1]]
}
TF_scores <- TF_scores[complete.cases(TF_scores),]
TF_scores$ID <- paste("X", TF_scores$ID, sep = "")
##Combine TF and kinase
names(TF_scores) <- c("X1","NES")
kinase_activities <- as.data.frame(rbind(kinase_activities, TF_scores))
#### Input formatting
metab_input_carnival <- ttop_tumour_vs_healthy[ttop_tumour_vs_healthy$P.Value < 0.05,c(1,4)]
metab_input_carnival <- metab_input_carnival[metab_input_carnival$pubchem %in% meta_network_with_X$source | metab_input_carnival$pubchem %in% meta_network_with_X$target,]
metabs <- metab_input_carnival$pubchem
metab_input_carnival <- as.data.frame(sign(t(metab_input_carnival[,2])))
names(metab_input_carnival) <- metabs
signaling_input_carnival <- kinase_activities[abs(kinase_activities$NES) > 1.7,]
signaling_input_carnival <- signaling_input_carnival[signaling_input_carnival$X1 %in% meta_network_with_X$source | signaling_input_carnival$X1 %in% meta_network_with_X$target,]
signaling_enzymes <- signaling_input_carnival$X1
signaling_input_carnival <- as.data.frame(sign(t(signaling_input_carnival[,2])))
names(signaling_input_carnival) <- signaling_enzymes
write_csv(metab_input_carnival, "results/metabolomic/metab_input_carnival.csv")
write_tsv(metab_input_carnival, "results/metabolomic/metab_input_carnival.tsv")
write_csv(signaling_input_carnival, "results/phospho/signaling_input_carnival.csv")
write_tsv(signaling_input_carnival, "results/phospho/signaling_input_carnival.tsv")
meta_network_with_X$source <- gsub("[-+{},;() ]","______",meta_network_with_X$source)
meta_network_with_X$target <- gsub("[-+{},;() ]","______",meta_network_with_X$target)
isdup <- rep(FALSE,length(meta_network_with_X[,1]))
for(i in 1:length(meta_network_with_X[,1]))
{
isdup[i] <- meta_network_with_X[i,1] == meta_network_with_X[i,3]
}
meta_network_with_X <- meta_network_with_X[!isdup,]
meta_network_with_X <- unique(meta_network_with_X)
write_tsv(meta_network_with_X, "support/meta_network_with_X_nobadchar.tsv")
library(readr)
library(stringr)
library('org.Hs.eg.db')
library(CARNIVAL) # load CARNIVAL library
library(biomaRt)
library(gsubfn)
library(rpubchem)
setwd("~/Dropbox/COSMOS/")
CARNIVAL_Result <- runCARNIVAL(CplexPath="~/Documents/cplex",
Result_dir="results/multi_omic/carnival/",
CARNIVAL_example=NULL,
UP2GS=F,
netFile = "support/meta_network_with_X_nobadchar.tsv",
measFile = "results/metabolomic/metab_input_carnival.tsv",
inputFile = "results/phospho/signaling_input_carnival.tsv",
weightFile = NULL,
timelimit = 7200,
mipGAP = 0.12
) #11.24
CARNIVAL_Result2 <- runCARNIVAL(CplexPath="~/Documents/cplex",
Result_dir="results/multi_omic/carnival/",
CARNIVAL_example=NULL,
UP2GS=F,
netFile = "support/meta_network_with_X_nobadchar.tsv",
measFile = "results/phospho/signaling_input_carnival.tsv",
inputFile = "results/metabolomic/metab_input_carnival.tsv",
weightFile = NULL,
timelimit = 7200
)# 2.44
save(CARNIVAL_Result,"results/multi_omic/CARNIVAL_result_forward.RData")
?save
save(CARNIVAL_Result,file = "results/multi_omic/CARNIVAL_result_forward.RData")
save(CARNIVAL_Result2,file = "results/multi_omic/CARNIVAL_result_backward.RData")
load(CARNIVAL_Result)
load("results/multi_omic/CARNIVAL_result_forward.RData")
load("results/multi_omic/CARNIVAL_result_backward.RData")
signaling_input_carnival <- as.data.frame(
read_delim("results/phospho/signaling_input_carnival.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
metab_input_carnival <- as.data.frame(
read_delim("results/metabolomic/metab_input_carnival.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
sif <- as.data.frame(CARNIVAL_Result[[1]]$weightedSIF)
sif2 <- as.data.frame(CARNIVAL_Result2[[1]]$weightedSIF)
sif$Node1 <- gsub("^X","",sif$Node1)
sif$Node2 <- gsub("^X","",sif$Node2)
sif2$Node1 <- gsub("^X","",sif2$Node1)
sif2$Node2 <- gsub("^X","",sif2$Node2)
att <- as.data.frame(CARNIVAL_Result[[1]]$attributesAll)#[,c(1,2)]
att$measured <- ifelse(att$Nodes %in% names(signaling_input_carnival) | att$Nodes %in% names(metab_input_carnival), 1, 0)
att$Nodes <- gsub("^X","",att$Nodes)
att2 <- as.data.frame(CARNIVAL_Result2[[1]]$attributesAll)#[,c(1,2)]
att2$measured <- ifelse(att2$Nodes %in% names(signaling_input_carnival) | att2$Nodes %in% names(metab_input_carnival), 1, 0)
att2$Nodes <- gsub("^X","",att2$Nodes)
att2$type <- ifelse(grepl("Metab",att2$Nodes), "metabolite","protein")
########################
prots <- unique(c(att$Nodes, att2$Nodes))
prots <- prots[!(grepl("Metab",prots))]
prots <- gsub("Gene[0-9]+__","",prots)
prots <- gsub("_reverse","",prots)
prots <- gsub("EXCHANGE.*","",prots)
prots <- unique(prots)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
G_list <- getBM(filters = "entrezgene_id",
attributes = c('hgnc_symbol','entrezgene_id', "description"),
values = prots, mart = ensembl)
gene_mapping <- G_list[,1]
names(gene_mapping) <- G_list[,2]
View(sif)
sif$Node1 <- gsub("_reverse","",sif$Node1)
sif$Node2 <- gsub("_reverse","",sif$Node2)
sif2$Node1 <- gsub("_reverse","",sif2$Node1)
sif2$Node2 <- gsub("_reverse","",sif2$Node2)
att$Nodes <- gsub("_reverse","",att$Nodes)
att2$Nodes <- gsub("_reverse","",att2$Nodes)
sif$Node1 <- gsub("EXCHANGE.*","",sif$Node1)
sif$Node2 <- gsub("EXCHANGE.*","",sif$Node2)
sif2$Node1 <- gsub("EXCHANGE.*","",sif2$Node1)
sif2$Node2 <- gsub("EXCHANGE.*","",sif2$Node2)
att$Nodes <- gsub("EXCHANGE.*","",att$Nodes)
att2$Nodes <- gsub("EXCHANGE.*","",att2$Nodes)
metabs <- unique(c(att$Nodes, att2$Nodes))
metabs <- metabs[(grepl("Metab",metabs))]
metab_to_pubchem <- as.data.frame(read_csv("support/metab_to_pubchem.csv"))
metab_to_pubchem_vec <- metab_to_pubchem$name
names(metab_to_pubchem_vec) <- metab_to_pubchem$pubchem
for(i in 1:length(sif$Node1))
{
if(gsub("Gene[0-9]+__","",sif[i,1]) %in% names(gene_mapping))
{
if(grepl("Gene",sif[i,1]))
{
prefix <- gsub("__.*","",sif[i,1])
sif[i,1] <- paste(prefix,gene_mapping[gsub("Gene[0-9]+__","",sif[i,1])], sep = "__")
}
else
{
sif[i,1] <- gene_mapping[gsub("Gene[0-9]+__","",sif[i,1])]
}
}
if(gsub("Gene[0-9]+__","",sif[i,3]) %in% names(gene_mapping))
{
if(grepl("Gene",sif[i,3]))
{
prefix <- gsub("__.*","",sif[i,3])
sif[i,3] <- paste(prefix,gene_mapping[gsub("Gene[0-9]+__","",sif[i,3])], sep = "__")
}
else
{
sif[i,3] <- gene_mapping[gsub("Gene[0-9]+__","",sif[i,3])]
}
}
if(gsub("Metab__","",gsub("___[a-z]____","",sif[i,1])) %in% names(metab_to_pubchem_vec))
{
suffix <- str_match(sif[i,1],"___.____")
metab <- metab_to_pubchem_vec[gsub("Metab__","",gsub("___[a-z]____","",sif[i,1]))]
sif[i,1] <- paste(metab,suffix,sep = "")
}
if(gsub("Metab__","",gsub("___[a-z]____","",sif[i,3])) %in% names(metab_to_pubchem_vec))
{
suffix <- str_match(sif[i,3],"___.____")
metab <- metab_to_pubchem_vec[gsub("Metab__","",gsub("___[a-z]____","",sif[i,3]))]
sif[i,3] <- paste(metab,suffix,sep = "")
}
}
for(i in 1:length(sif2$Node1))
{
if(gsub("Gene[0-9]+__","",sif2[i,1]) %in% names(gene_mapping))
{
if(grepl("Gene",sif2[i,1]))
{
prefix <- gsub("__.*","",sif2[i,1])
sif2[i,1] <- paste(prefix,gene_mapping[gsub("Gene[0-9]+__","",sif2[i,1])], sep = "__")
}
else
{
sif2[i,1] <- gene_mapping[gsub("Gene[0-9]+__","",sif2[i,1])]
}
}
if(gsub("Gene[0-9]+__","",sif2[i,3]) %in% names(gene_mapping))
{
if(grepl("Gene",sif2[i,3]))
{
prefix <- gsub("__.*","",sif2[i,3])
sif2[i,3] <- paste(prefix,gene_mapping[gsub("Gene[0-9]+__","",sif2[i,3])], sep = "__")
}
else
{
sif2[i,3] <- gene_mapping[gsub("Gene[0-9]+__","",sif2[i,3])]
}
}
if(gsub("Metab__","",gsub("___[a-z]____","",sif2[i,1])) %in% names(metab_to_pubchem_vec))
{
suffix <- str_match(sif2[i,1],"___.____")
metab <- metab_to_pubchem_vec[gsub("Metab__","",gsub("___[a-z]____","",sif2[i,1]))]
sif2[i,1] <- paste(metab,suffix,sep = "")
}
if(gsub("Metab__","",gsub("___[a-z]____","",sif2[i,3])) %in% names(metab_to_pubchem_vec))
{
suffix <- str_match(sif2[i,3],"___.____")
metab <- metab_to_pubchem_vec[gsub("Metab__","",gsub("___[a-z]____","",sif2[i,3]))]
sif2[i,3] <- paste(metab,suffix,sep = "")
}
}
for(i in 1:length(att$Nodes))
{
if(gsub("Gene[0-9]+__","",att[i,1]) %in% names(gene_mapping))
{
if(grepl("Gene",att[i,1]))
{
prefix <- gsub("__.*","",att[i,1])
att[i,1] <- paste(prefix,gene_mapping[gsub("Gene[0-9]+__","",att[i,1])], sep = "__")
}
else
{
att[i,1] <- gene_mapping[gsub("Gene[0-9]+__","",att[i,1])]
}
}
if(gsub("Metab__","",gsub("___[a-z]____","",att[i,1])) %in% names(metab_to_pubchem_vec))
{
suffix <- str_match(att[i,1],"___.____")
metab <- metab_to_pubchem_vec[gsub("Metab__","",gsub("___[a-z]____","",att[i,1]))]
att[i,1] <- paste(metab,suffix,sep = "")
}
}
for(i in 1:length(att2$Nodes))
{
if(gsub("Gene[0-9]+__","",att2[i,1]) %in% names(gene_mapping))
{
if(grepl("Gene",att2[i,1]))
{
prefix <- gsub("__.*","",att2[i,1])
att2[i,1] <- paste(prefix,gene_mapping[gsub("Gene[0-9]+__","",att2[i,1])], sep = "__")
}
else
{
att2[i,1] <- gene_mapping[gsub("Gene[0-9]+__","",att2[i,1])]
}
}
if(gsub("Metab__","",gsub("___[a-z]____","",att2[i,1])) %in% names(metab_to_pubchem_vec))
{
suffix <- str_match(att2[i,1],"___.____")
metab <- metab_to_pubchem_vec[gsub("Metab__","",gsub("___[a-z]____","",att2[i,1]))]
att2[i,1] <- paste(metab,suffix,sep = "")
}
}
########################
url <- paste0(
'http://omnipathdb.org/ptms?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath_ptm <- download_omnipath()
omnipath_ptm <- omnipath_ptm[omnipath_ptm$modification %in% c("dephosphorylation","phosphorylation"),]
KSN <- omnipath_ptm[,c(4,3)]
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_type, sep ="_")
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_offset, sep = "")
KSN$sign <- ifelse(omnipath_ptm$modification == "phosphorylation", 1, -1)
att$type <- ifelse(att$Nodes %in% KSN$enzyme_genesymbol, "Kinase",att$type)
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B,C&genesymbols=1&fields=sources,tfregulons_level'
)
View(sif)
View(att)
att$type <- ifelse(grepl("Metab",att$Nodes), "metabolite","protein")
att2$type <- ifelse(grepl("Metab",att2$Nodes), "metabolite","protein")
att$type <- ifelse(att$Nodes %in% KSN$enzyme_genesymbol, "Kinase",att$type)
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B,C&genesymbols=1&fields=sources,tfregulons_level'
)
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
att$type <- ifelse(att$Nodes %in% dorothea$source_genesymbol, "TF",att$type)
i <- 1
for(node in att$Nodes) #check if a node name is basename appears more than once in nodes. If so, it is a metabolic enzyme
{
if(sum(gsub("Gene.*_","",node) == gsub("Gene.*_","",att$Nodes)) > 1)
{
att[i,4] <- "metab_enzyme"
}
i <- i+1
}
att$type <- ifelse(grepl("Gene.*_",att$Nodes), "metab_enzyme",att$type)
att2$type <- ifelse(att2$Nodes %in% KSN$enzyme_genesymbol, "Kinase",att2$type)
att2$type <- ifelse(att2$Nodes %in% dorothea$source_genesymbol, "TF",att2$type)
i <- 1
for(node in att2$Nodes) #check if a node name is basename appears more than once in nodes. If so, it is a metabolic enzyme
{
if(sum(gsub("Gene.*_","",node) == gsub("Gene.*_","",att2$Nodes)) > 1)
{
att2[i,4] <- "metab_enzyme"
}
i <- i+1
}
att2$type <- ifelse(grepl("Gene.*_",att2$Nodes), "metab_enzyme",att2$type)
att$Activity <- sign(as.numeric(as.character(att$Activity)))
att2$Activity <- sign(as.numeric(as.character(att2$Activity)))
sif$Node1 <- gsub("Gene[0-9]+__","",sif$Node1)
sif$Node2 <- gsub("Gene[0-9]+__","",sif$Node2)
att$Nodes <- gsub("Gene[0-9]+__","",att$Nodes)
sif2$Node1 <- gsub("Gene[0-9]+__","",sif2$Node1)
sif2$Node2 <- gsub("Gene[0-9]+__","",sif2$Node2)
att2$Nodes <- gsub("Gene[0-9]+__","",att2$Nodes)
sif <- sif[sif$Node1 != sif$Node2,]
sif2 <- sif2[sif2$Node1 != sif2$Node2,]
sif$Node1 <- gsub("[_]{3,5}","_",sif$Node1)
sif$Node2 <- gsub("[_]{3,5}","_",sif$Node2)
att$Nodes <- gsub("[_]{3,5}","_",att$Nodes)
sif2$Node1 <- gsub("[_]{3,5}","_",sif2$Node1)
sif2$Node2 <- gsub("[_]{3,5}","_",sif2$Node2)
att2$Nodes <- gsub("[_]{3,5}","_",att2$Nodes)
setwd("~/Dropbox/COSMOS/")
setwd("~/Dropbox/COSMOS")
knitr::opts_chunk$set(echo = TRUE)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl")
usethis::use_pkgdown()
pkgdown::build_favicons()
pkgdown::build_favicons(overwrite = T)
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
pkgdown::build_home()
library(pkgdown)
build_news()
build_site()
build_site()
?build_site
build_site
build_site()
build_site()
build_site()
build_site()
build_site()
build_news()
build_site()
build_site()
