if (max(abs(df[, FCIndex])) >= 1) {
xlimAbs <- ceiling(max(abs(df[, FCIndex])))
ylimAbs <- ceiling(max(abs(-log(df[, pValIndex]))))
}
else {
xlimAbs <- max(abs(df[, FCIndex]))
ylimAbs <- max(abs(-log(df[, pValIndex])))
}
if (is.null(vAss)) {
vAss <- xlimAbs/10
}
xneg <- function(x) abs(hAss - 1 + x/(x + vAss))
xpos <- function(x) abs(hAss - 1 + x/(x - vAss))
test <- function(x, y, vAss) {
if (x < -vAss) {
if (xneg(x) < -log(y)) {
return("1")
}
else {
return("0")
}
}
else {
if (x > vAss) {
if (xpos(x) < -log(y)) {
return("1")
}
else {
return("0")
}
}
else {
return("0")
}
}
}
if (straight) {
df$couleur <- ifelse(abs(df$logFC) >= vAss & df$adj.P.Val <=
hAssOri, "1", "0")
}
else {
df$couleur <- "0"
df$couleur <- apply(df, 1, FUN = function(x) test(as.numeric(x[FCIndex]),
as.numeric(x[pValIndex]), vAss))
}
df <- df[order(df$adj.P.Val, decreasing = F), ]
df$condLabel <- df[, IDIndex]
df[df$couleur == "0", "condLabel"] <- NA
labels_to_keep <- c(df[c(1:nlabels), "condLabel"],manual_labels)
df[!(df$condLabel %in% labels_to_keep), "condLabel"] <- NA
df$couleur <- ifelse(df$couleur == "1" & df$logFC < 0, "2",
df$couleur)
if (label) {
a <- ggplot(df, aes(x = logFC, y = -log(adj.P.Val), color = couleur)) +
geom_point(alpha = 0.5) + geom_label_repel(aes(label = condLabel)) +
stat_function(fun = xneg, xlim = c(-xlimAbs, -vAss),
color = "black", alpha = 0.7) + ylim(c(0, ylimAbs)) +
xlim(c(-xlimAbs, xlimAbs)) + stat_function(fun = xpos,
xlim = c(vAss, xlimAbs), color = "black", alpha = 0.7) +
scale_colour_manual(values = c("grey30", "red",
"royalblue3")) + theme_minimal() + theme(legend.position = "none")
}
else {
if (straight) {
a <- ggplot(df, aes(x = logFC, y = -log(adj.P.Val),
color = couleur)) + geom_point(alpha = 0.5) +
geom_vline(xintercept = -vAss, color = "blue") +
geom_vline(xintercept = vAss, color = "blue") +
ylim(c(0, ylimAbs)) + xlim(c(-xlimAbs, xlimAbs)) +
geom_hline(yintercept = hAss, color = "red") +
scale_colour_manual(values = c("grey30", "red",
"royalblue3")) + theme_minimal() + theme(legend.position = "none")
}
else {
a <- ggplot(df, aes(x = logFC, y = -log(adj.P.Val),
color = couleur)) + geom_point(alpha = 0.5) +
stat_function(fun = xneg, xlim = c(-xlimAbs,
-vAss), color = "black", alpha = 0.7) + ylim(c(0,
ylimAbs)) + xlim(c(-xlimAbs, xlimAbs)) + stat_function(fun = xpos,
xlim = c(vAss, xlimAbs), color = "black", alpha = 0.7) +
scale_colour_manual(values = c("grey30", "red",
"royalblue3")) + theme_minimal() + theme(legend.position = "none")
}
}
return(a)
}
library(readr)
library(vsn)
library(limma)
library(viper)
library(readxl)
library(fgsea)
library(GSEABase)
library(ggplot2)
library(reshape)
library(pheatmap)
library(gridExtra)
library(grid)
library(cowplot)
library(ggrepel)
# working_dir <- "~/Dropbox/test/"
# setwd(working_dir)
url <- paste0(
'http://omnipathdb.org/interactions?',
'datasets=tfregulons&tfregulons_levels=A,B&genesymbols=1&fields=sources,tfregulons_level'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
##Dorothea/viper
dorothea <- download_omnipath()
dorothea <- dorothea[,c(4,3,6,7)]
dorothea$sign <- dorothea$is_stimulation - dorothea$is_inhibition
dorothea$sign <- ifelse(dorothea$sign == 0, 1, dorothea$sign)
dorothea <- dorothea[,c(1,2,5)]
ttop_InfectedvsControl <- as.data.frame(readRDS("~/Dropbox/test/topTable_GSE147507.rds"))
ttop_InfectedvsControl <- ttop_InfectedvsControl[complete.cases(ttop_InfectedvsControl),]
eset <- ttop_InfectedvsControl$t
names(eset) <- ttop_InfectedvsControl$gene
#first we need to format the dorothea dataframe we prepared into a proper viper input
viper_regulon <- df_to_viper_regulon(dorothea)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity[] <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
to_bar <- TF_activity[order(abs(TF_activity$V1), decreasing = T),, drop = F]
to_bar <- to_bar[1:20,,drop = F]
to_bar$ID <- factor(row.names(to_bar), levels = row.names(to_bar))
ggplot(to_bar,aes(x = ID, y = V1)) + geom_bar(stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
View(dorothea)
View(ttop_InfectedvsControl[ttop_InfectedvsControl$ID %in% dorothea[dorothea$source_genesymbol == "USF1",1],])
dorothea[dorothea$source_genesymbol == "USF1",1]
ttop_InfectedvsControl$ID
View(ttop_InfectedvsControl[ttop_InfectedvsControl$gene %in% dorothea[dorothea$source_genesymbol == "USF1",1],])
mean(ttop_InfectedvsControl[ttop_InfectedvsControl$gene %in% dorothea[dorothea$source_genesymbol == "USF1",1],"t"])
View(TF_activity)
eset <- ttop_InfectedvsControl$t
names(eset) <- ttop_InfectedvsControl$gene
#first we need to format the dorothea dataframe we prepared into a proper viper input
viper_regulon <- df_to_viper_regulon(dorothea)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity[] <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
View(TF_activity)
mean(ttop_InfectedvsControl$t)
View(viper_regulon)
length(viper_regulon):1
viper_regulon <- viper_regulon[length(viper_regulon):1]
View(viper_regulon)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity[] <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
View(TF_activity)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
View(TF_activity)
order(abs(TF_activity$V1)
)
View(TF_activity)
#first we need to format the dorothea dataframe we prepared into a proper viper input
viper_regulon <- df_to_viper_regulon(dorothea)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
View(viper_regulon)
TF_activity <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity[] <- TF_activity[order(abs(TF_activity$V1), decreasing = T),]
View(TF_activity)
TF_activity <- TF_activity[order(abs(TF_activity$V1), decreasing = T),,drop = FALSE]
View(TF_activity)
#run viper and you should get a dataframe of TF activities
TF_activity <- as.data.frame(
viper(eset = eset, regulon = viper_regulon, nes = T, minsize = 5, eset.filter = F)) #most import paramter is eset.filter. With dorthea it sohuld be set to FALSE (see luz paper)
TF_activity <- TF_activity[order(abs(TF_activity$V1), decreasing = T),,drop = FALSE]
to_bar <- TF_activity[order(abs(TF_activity$V1), decreasing = T),, drop = F]
to_bar <- to_bar[1:20,,drop = F]
to_bar$ID <- factor(row.names(to_bar), levels = row.names(to_bar))
ggplot(to_bar,aes(x = ID, y = V1)) + geom_bar(stat = "identity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45))
volcano_nice(ttop_InfectedvsControl[ttop_InfectedvsControl$gene %in% names(viper_regulon$USF1$tfmode),], #example
FCIndex = 2, pValIndex = 5, IDIndex = 1,nlabels = 20, label = T)
##Import and generate a causal network from OMNIPATH
url <- paste0(
'http://omnipathdb.org/interactions?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath <- download_omnipath()
omnipath <- omnipath[omnipath$is_stimulation != 0 | omnipath$is_inhibition != 0,]
omnipath_sif <- omnipath[omnipath$is_stimulation ==1,c(3,6,4)] #First we get the activation
omnipath_sif_2 <- omnipath[omnipath$is_inhibition ==1,c(3,7,4)] #Then we get the inhibtion
names(omnipath_sif) <- c("source","sign","target")
names(omnipath_sif_2) <- c("source","sign","target")
#Then we bind together activations and inhibtion to get the complete network
omnipath_sif <- as.data.frame(rbind(omnipath_sif,omnipath_sif_2))
omnipath_sif$source <- gsub("-","_",omnipath_sif$source)
omnipath_sif$target <- gsub("-","_",omnipath_sif$target)
#Some additional interactions from pathwayExtra of omnipath
# 1              CDK1              ACE2           0              0             0
# 2               AGT              ACE2           0              0             0
# 3            ADAM17              ACE2           1              0             1
# 4              ACE2              CCL2           1              1             0
add_interactions <- as.data.frame(matrix(NA,2,3))
add_interactions[,1] <- c("ADAM17","ACE2")
add_interactions[,2] <- c(-1,1)
add_interactions[,3] <- c("ACE2","CCL2")
names(add_interactions) <- c("source","sign","target")
omnipath_sif <- as.data.frame(rbind(omnipath_sif,add_interactions))
write_tsv(omnipath_sif,"~/Dropbox/test/omni_sif.tsv")
#We define the end points that we are trying to reach in the network, from the initial perturbation
TF_carni_inputs <- as.data.frame(t(TF_activity[c(1:25),,drop = F]))
write_tsv(TF_carni_inputs,"~/Dropbox/test/TF_activities_carni.tsv")
View(TF_carni_inputs)
View(ttop_InfectedvsControl)
View(ttop_InfectedvsControl)
library(GEOquery)
library(dplyr)
#Import the GEO dataset
gse <- getGEO("GSE30219")
#Import and extract hte id mapping informations
gpl <- getGEO("GPL570")
gpl <- gpl@dataTable
gpl <- gpl@table
gpl <- gpl[gpl$`Sequence Type` == "Consensus sequence" & gpl$`Gene Symbol` != "",]
#Format the mapping information from probe ID to gene symbole in the form of a names vector
gpl_mapper <- gsub(" .*","",gpl$`Gene Symbol`)
names(gpl_mapper) <- gpl$ID
#Extract the expression matrix
datExpr = as.data.frame(exprs(gse[[1]]))
#Replace affymetrix probe IDs with gene symbols
datExpr$ID <- row.names(datExpr)
datExpr <- datExpr[datExpr$ID %in% names(gpl_mapper),]
for(i in 1:length(datExpr[,1]))
{
if(datExpr[i,"ID"] %in% names(gpl_mapper))
{
datExpr[i,"ID"] <- gpl_mapper[datExpr[i,"ID"]]
} else {
datExpr[i,"ID"] <- "______"
}
}
datExpr <- datExpr[!grepl("______",datExpr$ID),]
##Alternativ e probes need to be summarised. For affymetrix microaray, I guess that median is the best
datExpr <- datExpr %>% group_by(ID) %>% summarise_each(funs(median(., na.rm = TRUE)))
datExpr <- as.data.frame(datExpr)
#now that genes are unique, we can use them as row names
row.names(datExpr) <- datExpr$ID
datExpr <- datExpr[,-1]
#let's rename the columns
names(datExpr) <- as.character(gse$GSE30219_series_matrix.txt.gz$title)
#let's compile some clinical infos as well
sample_infos <- as.data.frame(cbind(as.character(gse$GSE30219_series_matrix.txt.gz$title),gse$GSE30219_series_matrix.txt.gz$`gender:ch1`))
names(sample_infos) <- c("title","gender")
sample_infos$tissue <- gse$GSE30219_series_matrix.txt.gz$`tissue:ch1`
sample_infos$status <- gse$GSE30219_series_matrix.txt.gz$`status:ch1`
sample_infos$pt_stage <- gse$GSE30219_series_matrix.txt.gz$`pt stage:ch1`
sample_infos$pm_stage <- gse$GSE30219_series_matrix.txt.gz$`pm stage:ch1`
sample_infos$pn_stage <- gse$GSE30219_series_matrix.txt.gz$`pn stage:ch1`
sample_infos$relapse <- gse$GSE30219_series_matrix.txt.gz$`relapse (event=1; no event=0):ch1`
sample_infos$hystology <- gse$GSE30219_series_matrix.txt.gz$`histology:ch1`
sample_infos$age <- gse$GSE30219_series_matrix.txt.gz$`age at surgery:ch1`
sample_infos$follow_up_time <- gse$GSE30219_series_matrix.txt.gz$`follow-up time (months):ch1`
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.1
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.2
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.3
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.4
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.5
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.5
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.6
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.7
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.8
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.9
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1.10
gse$GSE30219_series_matrix.txt.gz$characteristics_ch1
gse$GSE30219_series_matrix.txt.gz$supplementary_file
names(gse$GSE30219_series_matrix.txt.gz)
gse$GSE30219_series_matrix.txt.gz@featureData
gse$GSE30219_series_matrix.txt.gz@featureData@varMetadata
gse$GSE30219_series_matrix.txt.gz@featureData@data
View(gse$GSE30219_series_matrix.txt.gz@featureData@data)
View(gse$GSE30219_series_matrix.txt.gz@phenoData@data)
names(gse$GSE30219_series_matrix.txt.gz@phenoData@data)
sample_infos$original_ID <- gse$GSE30219_series_matrix.txt.gz$description
View(sample_infos)
library(readr)
supp_table_7 <- as.data.frame(
read_csv("Documents/MoBi_project_2020/data/supp_table_7"))
View(sample_infos)
View(supp_table_7)
supp_table_7 <- as.data.frame(
read_csv("Documents/MoBi_project_2020/data/supp_table_7"))
supp_table_7 <- as.data.frame(
read_csv("Documents/MoBi_project_2020/data/supp_table_7"))
View(supp_table_7)
View(sample_infos)
supp_table_7 <- supp_table_7[c(1,3,9,10,11,12,13)]
supp_table_7 <- supp_table_7[c(1,3,9,10,11,12,13)]
supp_table_7 <- as.data.frame(
read_csv("Documents/MoBi_project_2020/data/supp_table_7"))
supp_table_7 <- supp_table_7[c(1,3,9,10,11,12,13)]
View(supp_table_7)
sample_infos <- merge(sample_infos,supp_table_7, by = "original_ID")
datExpr <- datExpr[,names(datExpr) %in% sample_infos$title]
#Write the tables
write.csv(datExpr,"~/Documents/MoBi_project_2020/data/expression_dataframe.csv")
write.csv(sample_infos,"~/Documents/MoBi_project_2020/data/sample_infos.csv")
library(readr)
library(omicToolsTest)
library(vsn)
library(limma)
library(viper)
phosphoproteomic <- as.data.frame(read_delim("Dropbox/marco_metactivity/data/phosphoproteomic.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
phosphoproteomic <- phosphoproteomic[phosphoproteomic$`Localization prob` > 0.9 & !is.na(phosphoproteomic$`Gene names`),]
phospho_ID <- paste(gsub(";.*","",phosphoproteomic$`Gene names`), gsub(";.*","",phosphoproteomic$`Amino acid`), sep = "_")
phospho_ID <- paste(phospho_ID,gsub(";.*","",phosphoproteomic$`Positions within proteins`), sep = "")
phosphoproteomic <- phosphoproteomic[,c(130:149)]
row.names(phosphoproteomic) <- phospho_ID
phosphoproteomic[phosphoproteomic == 0] <- NA
names(phosphoproteomic) <- gsub("Intensity ","",names(phosphoproteomic))
targets <- as.data.frame(matrix(NA,length(phosphoproteomic[1,]),2))
names(targets) <- c("sample","condition")
targets$sample <- names(phosphoproteomic)
targets$condition <- gsub("_.*","",targets$sample)
# magicPlotMaker(log2(phosphoproteomic), "~/Dropbox/marco_metactivity/visualisation/phosphoproteomic/raw_log2/",targets)
dev.off()
fit <- vsnMatrix(as.matrix(phosphoproteomic))
meanSdPlot(fit)
phosphoproteomic <- as.data.frame(vsn::predict(fit,as.matrix(phosphoproteomic)))
# magicPlotMaker(phosphoproteomic, "~/Dropbox/marco_metactivity/visualisation/phosphoproteomic/vsn/",targets)
dev.off()
comparisons <- list("c786"=c(3,-4),"M1A"=c(1,-4),"M2A"=c(2,-4))
limmaRes <- runLimma(phosphoproteomic,targets,comparisons)
ttop_c786 <- ttopFormatter(topTable(limmaRes[[1]],1,12343,adjust.method = "fdr"))
ttop_M1A <- ttopFormatter(topTable(limmaRes[[1]],2,12343,adjust.method = "fdr"))
ttop_M2A <- ttopFormatter(topTable(limmaRes[[1]],3,12343,adjust.method = "fdr"))
t_table <- merge(ttop_c786[,c(1,4)],ttop_M1A[,c(1,4)], by = "ID")
t_table <- merge(t_table,ttop_M2A[,c(1,4)], by = "ID")
names(t_table) <- c("ID","786-O","M1A","M2A")
########
url <- paste0(
'http://omnipathdb.org/ptms?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath_ptm <- download_omnipath()
omnipath_ptm <- omnipath_ptm[omnipath_ptm$modification %in% c("dephosphorylation","phosphorylation"),]
KSN <- omnipath_ptm[,c(4,3)]
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_type, sep ="_")
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_offset, sep = "")
KSN$sign <- ifelse(omnipath_ptm$modification == "phosphorylation", 1, -1)
KSN_viper <- df_to_viper_regulon(KSN)
eset <- t_table[,c(2,3,4)]
row.names(eset) <- t_table$ID
Kin_activity <- as.data.frame(viper(eset = eset, regulon = KSN_viper, minsize = 5, adaptive.size = F, eset.filter = F))
Kin_activity$kinase <- row.names(Kin_activity)
View(Kin_activity)
unique(targets)
unique(targets$condition)
library(readr)
TF_activities <- read_csv("Dropbox/marco_metactivity/results/TF_activities.csv")
View(TF_activities)
library(readr)
library(stringr)
library('org.Hs.eg.db')
setwd("~/Dropbox/COSMOS/")
#### Preparation des input metabolomic
ttop_tumour_vs_healthy <- as.data.frame(
read_csv("results/metabolomic/ttop_tumour_vs_healthy.csv"))
metab_to_kegg <- as.data.frame(
read_csv("support/metab_to_kegg.txt"))
meta_network_with_X <- as.data.frame(
read_delim("support/meta_network_carnival_ready_exch_solved.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
kegg_to_pubchem <- as.data.frame(
read_csv("support/kegg_to_pubchem.txt",
col_names = FALSE))
kegg_to_pubchem$X2 <- paste("XMetab__",kegg_to_pubchem$X2, sep = "")
compartment_codes <- unique(c(meta_network_with_X$source,meta_network_with_X$target))
compartment_codes <- compartment_codes[grepl("Metab",compartment_codes)]
compartment_codes <- unique(str_match(compartment_codes,"___.____"))
compartment_mapping <- list()
for(i in 1:length(compartment_codes))
{
df <- kegg_to_pubchem
df$X2 <- paste(df$X2, compartment_codes[i], sep = "")
compartment_mapping[[i]] <- df
}
compartment_mapping <- as.data.frame(do.call(rbind, compartment_mapping))
compartment_mapping <- compartment_mapping[
compartment_mapping$X2 %in% meta_network_with_X$source |
compartment_mapping$X2 %in% meta_network_with_X$target,
]
kegg_to_pubchem_with_comp <- compartment_mapping
names(kegg_to_pubchem_with_comp) <- c("KEGG","pubchem")
full_mapping <- merge(metab_to_kegg, kegg_to_pubchem_with_comp, by = "KEGG")
names(ttop_tumour_vs_healthy)[1] <- "metab_name"
ttop_tumour_vs_healthy <- merge(ttop_tumour_vs_healthy, full_mapping, by = "metab_name")
ttop_tumour_vs_healthy <- ttop_tumour_vs_healthy[,c(9,2:7)]
#### Preparation des input kinase/TF
##KINASE
kinase_activities <- as.data.frame(
read_csv("results/phospho/kinase_activities.csv"))
symbols <- kinase_activities$X1
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(kinase_activities[,1]))
{
kinase_activities[i,1] <- mapping_symbole_to_entrez[kinase_activities[i,1]]
}
kinase_activities <- kinase_activities[complete.cases(kinase_activities),]
kinase_activities$X1 <- paste("X", kinase_activities$X1, sep = "")
##TF
TF_scores <- as.data.frame(
read_csv("results/transcriptomic/TF_scores.csv"))
symbols <- TF_scores$ID
# use mapIds method to obtain Entrez IDs
mapping_symbole_to_entrez <- mapIds(org.Hs.eg.db, symbols, 'ENTREZID', 'SYMBOL')
for(i in 1:length(TF_scores[,1]))
{
TF_scores[i,1] <- mapping_symbole_to_entrez[TF_scores[i,1]]
}
TF_scores <- TF_scores[complete.cases(TF_scores),]
TF_scores$ID <- paste("X", TF_scores$ID, sep = "")
##Combine TF and kinase
names(TF_scores) <- c("X1","NES")
kinase_activities <- as.data.frame(rbind(kinase_activities, TF_scores))
#### Input formatting
metab_input_carnival <- ttop_tumour_vs_healthy[ttop_tumour_vs_healthy$P.Value < 0.05,c(1,4)]
metab_input_carnival <- metab_input_carnival[metab_input_carnival$pubchem %in% meta_network_with_X$source | metab_input_carnival$pubchem %in% meta_network_with_X$target,]
metabs <- metab_input_carnival$pubchem
metab_input_carnival <- as.data.frame(sign(t(metab_input_carnival[,2])))
names(metab_input_carnival) <- metabs
signaling_input_carnival <- kinase_activities[abs(kinase_activities$NES) > 1.7,]
signaling_input_carnival <- signaling_input_carnival[signaling_input_carnival$X1 %in% meta_network_with_X$source | signaling_input_carnival$X1 %in% meta_network_with_X$target,]
signaling_enzymes <- signaling_input_carnival$X1
signaling_input_carnival <- as.data.frame(sign(t(signaling_input_carnival[,2])))
names(signaling_input_carnival) <- signaling_enzymes
write_csv(metab_input_carnival, "results/metabolomic/metab_input_carnival.csv")
write_tsv(metab_input_carnival, "results/metabolomic/metab_input_carnival.tsv")
write_csv(signaling_input_carnival, "results/phospho/signaling_input_carnival.csv")
write_tsv(signaling_input_carnival, "results/phospho/signaling_input_carnival.tsv")
meta_network_with_X$source <- gsub("[-+{},;() ]","______",meta_network_with_X$source)
meta_network_with_X$target <- gsub("[-+{},;() ]","______",meta_network_with_X$target)
isdup <- rep(FALSE,length(meta_network_with_X[,1]))
for(i in 1:length(meta_network_with_X[,1]))
{
isdup[i] <- meta_network_with_X[i,1] == meta_network_with_X[i,3]
}
meta_network_with_X <- meta_network_with_X[!isdup,]
meta_network_with_X <- unique(meta_network_with_X)
write_tsv(meta_network_with_X, "support/meta_network_with_X_nobadchar.tsv")
View(meta_network_with_X)
sif_for_tiedie <- meta_network_with_X
sif_for_tiedie$interaction <- as.character(sif_for_tiedie$interaction)
sif_for_tiedie$interaction <- ifelse(sif_for_tiedie$interaction == "1","activates>","inhibits>")
View(sif_for_tiedie)
write_csv(sif_for_tiedie,"~/Documents/TieDIE/examples/kidney_cancer/pathway.sif",col_names = F)
write_tsv(sif_for_tiedie,"~/Documents/TieDIE/examples/kidney_cancer/pathway.sif",col_names = F)
tiedie_up <- as.data.frame(t(signaling_input_carnival))
View(tiedie_up)
tiedie_up$node <- row.names(tiedie_up)
tiedie$weight <- abs(tiedie_up$V1)*1
abs(tiedie_up$V1)*1
tiedie_up$weight <- abs(tiedie_up$V1)*1
tiedie_up$effect <- ifelse(tiedie_up$V1 > 0,"+","-")
tiedie_down <- as.data.frame(t(metab_input_carnival))
tiedie_up <- tiedie_up[,-1]
tiedie_down$node <- row.names(tiedie_down)
tiedie_down$weight <- abs(tiedie_down$V1)*1
tiedie_down$effect <- ifelse(tiedie_down$V1 > 0, "+", "-")
tiedie_down <- tiedie_down[,-1]
write_tsv(tiedie_up,"~/Documents/TieDIE/examples/kidney_cancer/upstream.input.",col_names = F)
write_tsv(tiedie_down,"~/Documents/TieDIE/examples/kidney_cancer/downstream.input.",col_names = F)
tiedie_up <- as.data.frame(t(signaling_input_carnival))
tiedie_up$node <- row.names(tiedie_up)
tiedie_up$weight <- abs(tiedie_up$V1)*100
tiedie_up$effect <- ifelse(tiedie_up$V1 > 0,"+","-")
tiedie_up <- tiedie_up[,-1]
tiedie_down <- as.data.frame(t(metab_input_carnival))
tiedie_down$node <- row.names(tiedie_down)
tiedie_down$weight <- abs(tiedie_down$V1)*100
tiedie_down$effect <- ifelse(tiedie_down$V1 > 0, "+", "-")
tiedie_down <- tiedie_down[,-1]
write_tsv(tiedie_up,"~/Documents/TieDIE/examples/kidney_cancer/upstream.input.",col_names = F)
write_tsv(tiedie_down,"~/Documents/TieDIE/examples/kidney_cancer/downstream.input.",col_names = F)
tiedie_up <- as.data.frame(t(signaling_input_carnival))
tiedie_up$node <- row.names(tiedie_up)
tiedie_up$weight <- abs(tiedie_up$V1)*100
tiedie_up$effect <- ifelse(tiedie_up$V1 > 0,"+","-")
tiedie_up <- tiedie_up[,-1]
tiedie_down <- as.data.frame(t(metab_input_carnival))
tiedie_down$node <- row.names(tiedie_down)
tiedie_down$weight <- abs(tiedie_down$V1)*100
tiedie_down$effect <- ifelse(tiedie_down$V1 > 0, "+", "-")
tiedie_down <- tiedie_down[,-1]
write_tsv(tiedie_up,"~/Documents/TieDIE/examples/kidney_cancer/upstream.input",col_names = F)
write_tsv(tiedie_down,"~/Documents/TieDIE/examples/kidney_cancer/downstream.input",col_names = F)
